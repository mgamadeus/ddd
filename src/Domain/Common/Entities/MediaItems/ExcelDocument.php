<?php

declare(strict_types=1);

namespace DDD\Domain\Common\Entities\MediaItems;

use DDD\Infrastructure\Base\DateTime\DateTime;
use DDD\Infrastructure\Exceptions\InternalErrorException;
use DDD\Infrastructure\Validation\Constraints\Choice;
use Exception;
use PhpOffice\PhpSpreadsheet\Cell\Coordinate;
use PhpOffice\PhpSpreadsheet\IOFactory;
use PhpOffice\PhpSpreadsheet\Shared\Date as ExcelDate;
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Style\Alignment;
use PhpOffice\PhpSpreadsheet\Style\NumberFormat;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;

class ExcelDocument extends Document
{
    /** @var string|null The type of the mediaitem */
    #[Choice(choices: [self::TYPE_PHOTO, self::TYPE_VIDEO, self::TYPE_DOCUMENT])]
    public ?string $type = self::TYPE_DOCUMENT;

    /** @var string The title of the Excel document */
    public string $title;

    /** @var GenericMediaItemContent Excel File Content */
    public GenericMediaItemContent $mediaItemContent;

    /** @var Spreadsheet|null The loaded spreadsheet object */
    private ?Spreadsheet $spreadsheet = null;

    /**
     * Loads the spreadsheet from the media item content
     *
     * @return Spreadsheet
     * @throws InternalErrorException
     */
    public function getSpreadsheet(): Spreadsheet
    {
        if ($this->spreadsheet !== null) {
            return $this->spreadsheet;
        }

        try {
            // Create a temporary file for the Excel
            $tempExcelPath = tempnam(sys_get_temp_dir(), 'excel');
            file_put_contents($tempExcelPath, $this->mediaItemContent->getBody());

            // Load the spreadsheet
            $this->spreadsheet = IOFactory::load($tempExcelPath);

            // Clean up
            unlink($tempExcelPath);

            return $this->spreadsheet;
        } catch (Exception $e) {
            throw new InternalErrorException('Error loading Excel document: ' . $e->getMessage());
        }
    }

    /**
     * Converts the first sheet of the Excel document to HTML
     *
     * @return string HTML representation of the Excel document
     * @throws InternalErrorException
     */
    public function toHTML(): string
    {
        try {
            $spreadsheet = $this->getSpreadsheet();
            $sheet = $spreadsheet->getActiveSheet();

            $html = '<table border="1" cellpadding="5" cellspacing="0">';

            // Get the highest row and column indexes
            $highestRow = $sheet->getHighestRow();
            $highestColumn = $sheet->getHighestColumn();

            // Loop through each row
            for ($row = 1; $row <= $highestRow; $row++) {
                $html .= '<tr>';

                // Loop through each column in the row
                for ($col = 'A'; $col <= $highestColumn; $col++) {
                    $cellValue = $sheet->getCell($col . $row)->getValue();
                    $html .= '<td>' . htmlspecialchars((string)$cellValue) . '</td>';
                }

                $html .= '</tr>';
            }

            $html .= '</table>';

            return $html;
        } catch (Exception $e) {
            throw new InternalErrorException('Error converting Excel to HTML: ' . $e->getMessage());
        }
    }

    /**
     * Creates an Excel document from data array
     *
     * @param array $data Two-dimensional array of data (rows and columns)
     * @param array|null $headers Optional headers for the columns
     * @param string|null $title Optional title for the document
     * @param string|null $author Optional author name
     * @param DateTime|null $createdDateTime Optional creation date
     * @param DateTime|null $modifiedDateTime Optional modification date
     * @return ExcelDocument
     */
    public static function fromArray(
        array $data,
        ?array $headers = null,
        ?string $title = null,
        ?string $author = null,
        ?DateTime $createdDateTime = null,
        ?DateTime $modifiedDateTime = null
    ): ExcelDocument {
        // Create new Spreadsheet object
        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        // Set document properties
        $spreadsheet->getProperties()->setCreator($author ?? 'DDD Framework')->setLastModifiedBy($author ?? 'DDD Framework')->setTitle(
                $title ?? 'Excel Document'
            )->setSubject($title ?? 'Excel Document')->setDescription('Document generated by DDD Framework');

        if ($createdDateTime) {
            $spreadsheet->getProperties()->setCreated($createdDateTime->getTimestamp());
        }

        if ($modifiedDateTime) {
            $spreadsheet->getProperties()->setModified($modifiedDateTime->getTimestamp());
        }

        // Set headers if provided
        $startRow = 1;
        if ($headers) {
            $sheet->fromArray($headers, null, 'A1');
            $lastColumn = Coordinate::stringFromColumnIndex(count($headers));
            $sheet->getStyle('A1:' . $lastColumn . '1')->applyFromArray([
                'font' => ['bold' => true],
            ]);
            $startRow = 2;
        }


        // Write data and apply formatting
        foreach ($data as $rowIndex => $row) {
            foreach ($row as $colIndex => $value) {
                $cellCoordinate = Coordinate::stringFromColumnIndex($colIndex + 1) . ($rowIndex + $startRow);
                if ($value instanceof \DateTime) {
                    $sheet->setCellValue($cellCoordinate, ExcelDate::PHPToExcel($value));
                    $sheet->getStyle($cellCoordinate)
                        ->getNumberFormat()
                        ->setFormatCode('yyyy-mm-dd hh:mm:ss');
                } else {
                    $sheet->setCellValue($cellCoordinate, $value);
                    if (is_string($value) && strpos($value, "\n") !== false) {
                        $sheet->getStyle($cellCoordinate)
                            ->getAlignment()
                            ->setWrapText(true)
                            ->setVertical(Alignment::VERTICAL_TOP);
                    }
                }
            }
        }

        // Auto-size all columns
        foreach ($sheet->getColumnIterator() as $column) {
            $sheet->getColumnDimension($column->getColumnIndex())->setAutoSize(true);
        }

        // Create Excel document
        $excelDocument = new static();
        $excelDocument->mediaItemContent = new GenericMediaItemContent();
        $excelDocument->addChildren($excelDocument->mediaItemContent);

        if ($title) {
            $excelDocument->title = $title;
        }

        if ($createdDateTime) {
            $excelDocument->createdDateTime = $createdDateTime;
        }

        if ($modifiedDateTime) {
            $excelDocument->modifiedDateTime = $modifiedDateTime;
        }

        // Write to memory
        $writer = new Xlsx($spreadsheet);
        ob_start();
        $writer->save('php://output');
        $excelDocument->mediaItemContent->body = ob_get_clean();

        return $excelDocument;
    }

    /**
     * Creates an Excel document from a PhpSpreadsheet object
     *
     * @param Spreadsheet $spreadsheet The spreadsheet object
     * @param string|null $title Optional title for the document
     * @param DateTime|null $createdDateTime Optional creation date
     * @param DateTime|null $modifiedDateTime Optional modification date
     * @return ExcelDocument
     */
    public static function fromSpreadsheet(
        Spreadsheet $spreadsheet,
        ?string $title = null,
        ?DateTime $createdDateTime = null,
        ?DateTime $modifiedDateTime = null
    ): ExcelDocument {
        $excelDocument = new static();
        $excelDocument->mediaItemContent = new GenericMediaItemContent();
        $excelDocument->addChildren($excelDocument->mediaItemContent);
        $excelDocument->spreadsheet = $spreadsheet;

        if ($title) {
            $excelDocument->title = $title;
            $spreadsheet->getProperties()->setTitle($title);
        }

        if ($createdDateTime) {
            $excelDocument->createdDateTime = $createdDateTime;
            $spreadsheet->getProperties()->setCreated($createdDateTime->getTimestamp());
        }

        if ($modifiedDateTime) {
            $excelDocument->modifiedDateTime = $modifiedDateTime;
            $spreadsheet->getProperties()->setModified($modifiedDateTime->getTimestamp());
        }

        // Write to memory
        $writer = new Xlsx($spreadsheet);
        ob_start();
        $writer->save('php://output');
        $excelDocument->mediaItemContent->body = ob_get_clean();

        return $excelDocument;
    }

    /**
     * Gets the filename for the Excel document
     *
     * @return string|null The filename
     */
    public function getFileName(): ?string
    {
        $fileName = null;

        if (isset($this->fileName)) {
            $fileName = $this->fileName;
        } elseif (isset($this->title)) {
            $fileName = $this->title;
        }

        // Check if the fileName is set and does not end with '.xlsx'
        if ($fileName !== null && substr($fileName, -5) !== '.xlsx') {
            $fileName .= '.xlsx'; // Add '.xlsx' to the end
        }

        return $fileName;
    }

    /**
     * Forces download of the Excel document
     */
    public function download(): void
    {
        // Set headers to force download
        header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        header('Content-Disposition: attachment; filename="' . $this->getFileName() . '"');
        header('Content-Length: ' . strlen($this->mediaItemContent->body));
        header('Cache-Control: max-age=0');

        // Output the Excel content
        echo $this->mediaItemContent->body;
        exit;
    }

    /**
     * Extracts text content from all sheets in the Excel document
     *
     * @return string The extracted text
     * @throws InternalErrorException
     */
    public function getTextContent(): string
    {
        try {
            $spreadsheet = $this->getSpreadsheet();
            $textContent = '';

            foreach ($spreadsheet->getAllSheets() as $sheet) {
                $textContent .= $sheet->getTitle() . ":\n\n";

                // Get the highest row and column indexes
                $highestRow = $sheet->getHighestRow();
                $highestColumn = $sheet->getHighestColumn();

                // Loop through each row
                for ($row = 1; $row <= $highestRow; $row++) {
                    $rowData = [];

                    // Loop through each column in the row
                    for ($col = 'A'; $col <= $highestColumn; $col++) {
                        $cellValue = $sheet->getCell($col . $row)->getValue();
                        if ($cellValue !== null && $cellValue !== '') {
                            $rowData[] = $cellValue;
                        }
                    }

                    if (!empty($rowData)) {
                        $textContent .= implode("\t", $rowData) . "\n";
                    }
                }

                $textContent .= "\n\n";
            }

            return $textContent;
        } catch (Exception $e) {
            throw new InternalErrorException('Error extracting text from Excel: ' . $e->getMessage());
        }
    }
}