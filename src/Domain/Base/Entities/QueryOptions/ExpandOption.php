<?php

declare(strict_types=1);

namespace DDD\Domain\Base\Entities\QueryOptions;

use DDD\Domain\Base\Entities\ValueObject;
use DDD\Domain\Base\Repo\DB\DBEntity;
use DDD\Domain\Base\Repo\DB\Doctrine\DoctrineModel;
use DDD\Infrastructure\Exceptions\BadRequestException;
use DDD\Infrastructure\Exceptions\MethodNotAllowedException;
use DDD\Infrastructure\Reflection\ReflectionClass;
use ReflectionException;

/**
 * @method ExpandOptions|null getParent()
 * @property ExpandOptions|null $parent
 */
class ExpandOption extends ValueObject
{
    /** @var string The property name to expand */
    public ?string $propertyName;

    /** @var FiltersOptions Filter to be applied on expansion */
    public ?FiltersOptions $filters;

    /** @var OrderByOptions OrderBy options to be applied on expansion */
    public ?OrderByOptions $orderByOptions;

    /** @var ExpandOptions Expand options can be recursive */
    public ?ExpandOptions $expandOptions;

    /** @var SelectOptions|null Select options to be applied on expansion */
    public ?SelectOptions $selectOptions = null;

    /** @var ExpandDefinition|null Definition of which option is based on */
    public ?ExpandDefinition $expandDefinition = null;

    /** @var int Number of results to be skipped / offset */
    public int $skip = 0;

    /** @var int The number of results to be returned */
    public ?int $top = null;

    /** @var string|null Cursor for point to a resultset that was previously provided */
    public ?string $skiptoken = null;

    /** @var string|null The alias used when joining to expand. This is either autogenerated, in case no existing join exists or it is adopted from exsting join if found */
    public ?string $joinAlias = null;

    /** @var string|null unique key cache for this instance */
    protected ?string $uniqueKey = null;

    /**
     * @param string|null $propertyName
     * @param string|null $expandParameters
     * @throws BadRequestException
     */
    public function __construct(string $propertyName = null, string $expandParameters = null)
    {
        $this->propertyName = $propertyName;
        if ($expandParameters) {
            $this->parseExpandParameters($expandParameters);
        }
        parent::__construct();
    }

    /**
     * Parses expand parameters including select clauses.
     *
     * @param string $expandParameters
     * @return void
     * @throws BadRequestException
     */
    public function parseExpandParameters(string $expandParameters)
    {
        // Detect expand options.
        $expandPattern = '/expand\s*=\s*(?P<expandOptions>((\s*\w+\s*(?P<expandParameters>\((?:[^()]+|(?&expandParameters))*\))?)+,?)+)/mi';
        preg_match_all($expandPattern, $expandParameters, $matches);
        if (isset($matches['expandOptions'])) {
            foreach ($matches['expandOptions'] as $currentMatch) {
                $this->expandOptions = ExpandOptions::fromString($matches['expandOptions'][0]);
                $this->addChildren($this->expandOptions);
            }
            $expandParameters = preg_replace(
                '/(?P<expandText>expand\s*=\s*(?P<expandOptions>((\s*\w+\s*(?P<expandParameters>\((?:[^()]+|(?&expandParameters))*\))?)+,?)+))/mi',
                '',
                $expandParameters
            );
        }
        // Parse filters, orderBy, top, skip, and select.
        preg_match_all(
            '/filters\s*=\s*(?P<filters>[^;]+)|orderBy\s*=\s*(?P<orderBy>[^;]+)|top\s*=\s*(?P<top>[^;]+)|skip\s*=\s*(?P<skip>[^;]+)|skiptoken\s*=\s*(?P<skiptoken>[^;]+)|select\s*=\s*(?P<select>[^;]+)/mi',
            $expandParameters,
            $matches
        );
        if (isset($matches['skip'])) {
            foreach ($matches['skip'] as $currentMatch) {
                if ($currentMatch) {
                    $this->skip = (int)$currentMatch;
                }
            }
        }
        if (isset($matches['skiptoken'])) {
            foreach ($matches['skiptoken'] as $currentMatch) {
                if ($currentMatch) {
                    $this->skiptoken = $currentMatch;
                }
            }
        }
        if (isset($matches['top'])) {
            foreach ($matches['top'] as $currentMatch) {
                if ($currentMatch) {
                    $this->top = (int)$currentMatch;
                }
            }
        }
        if (isset($matches['orderBy'])) {
            foreach ($matches['orderBy'] as $currentMatch) {
                if ($currentMatch) {
                    $this->orderByOptions = OrderByOptions::fromString($currentMatch);
                    $this->addChildren($this->orderByOptions);
                }
            }
        }
        if (isset($matches['filters'])) {
            foreach ($matches['filters'] as $currentMatch) {
                if ($currentMatch) {
                    $this->filters = FiltersOptions::fromString($currentMatch);
                    $this->filters->setExpandOptionForAllFilterOptions($this);
                    $this->addChildren($this->filters);
                }
            }
        }
        if (isset($matches['select'])) {
            foreach ($matches['select'] as $currentMatch) {
                if ($currentMatch) {
                    $this->selectOptions = SelectOptions::fromString($currentMatch);
                    $this->addChildren($this->selectOptions);
                }
            }
        }
    }

    /**
     * @return string|null
     * @throws ReflectionException
     */
    public function getTargetPropertyRepoClass(): ?string
    {
        if (isset($this->expandDefinition)) {
            return $this->expandDefinition->getTargetPropertyRepoClass($this->propertyName);
        }
        return null;
    }

    /**
     * Returns the Doctrine Model Class for target property
     * @return string|null
     * @throws MethodNotAllowedException
     * @throws ReflectionException
     */
    public function getTargetPropertyModelClass(): ?string
    {
        $baseModelClass = $this->getBaseModelClass();
        $modelReflectionClass = ReflectionClass::instance($baseModelClass);
        try {
            $expandReflectionProperty = $modelReflectionClass->getProperty($this->propertyName);
        } catch (ReflectionException $e) {
            $expandReflectionProperty = null;
        }
        if (!$expandReflectionProperty) {
            return null;
        }
        /** @var DoctrineModel $baseModelClass */
        return $baseModelClass::getTargetModelClassForProperty($expandReflectionProperty);
    }

    /**
     * Returns Doctrine Model class for reference class
     * @return string|null
     * @throws MethodNotAllowedException
     */
    public function getBaseModelClass(): ?string
    {
        $referenceRepoClass = $this->getReferenceClassRepo();
        if ($referenceRepoClass) {
            /** @var DBEntity $referenceRepoClass */
            return $referenceRepoClass::BASE_ORM_MODEL;
        }
        return null;
    }

    /**
     * @return string|null
     * @throws MethodNotAllowedException
     */
    public function getReferenceClassRepo(): ?string
    {
        return $this->expandDefinition->getReferenceClassRepo();
    }

    public function uniqueKey(): string
    {
        if ($this->uniqueKey) {
            return $this->uniqueKey;
        }
        $key = md5(json_encode($this->toObject(true, true)));
        $this->uniqueKey = self::uniqueKeyStatic($key);
        return $this->uniqueKey;
    }

    public function getRootModelAlias(): string
    {
        $parent = $this->getParent();
        if ($parent && $parent instanceof ExpandOptions) {
            $expandOptionsParent = $parent->getParent();
            if ($expandOptionsParent && $expandOptionsParent instanceof ExpandOption) {
                return $expandOptionsParent->getRootModelAlias();
            }
        }
        return $this->getBaseModelAlias();
    }

    public function getParentJoinAlias(): string
    {
        $parent = $this->getParent();
        if ($parent && $parent instanceof ExpandOptions) {
            $expandOptionsParent = $parent->getParent();
            if ($expandOptionsParent && $expandOptionsParent instanceof ExpandOption) {
                return $expandOptionsParent->constructJoinModelAliasRecursively();
            }
        }
        return $this->getBaseModelAlias();
    }

    public function constructJoinModelAliasRecursively(): string
    {
        if (isset($this->joinAlias)) {
            // If alias was already set, e.g. if already used in a join that existed before, or it was explicitely set in applyExpandOptionsToDoctrineQueryBuilder(), use the same one again.
            return $this->joinAlias;
        }
        $baseModelAlias = $this->getBaseModelAlias();
        $currentExpandOptionAliasPart = ($baseModelAlias ?? '') . '_' . $this->propertyName;

        $parent = $this->getParent();
        if ($parent && $parent instanceof ExpandOptions) {
            $expandOptionsParent = $parent->getParent();
            if ($expandOptionsParent && $expandOptionsParent instanceof ExpandOption) {
                return $expandOptionsParent->constructJoinModelAliasRecursively() . '__' . $currentExpandOptionAliasPart;
            }
        }
        // Fallback
        return $currentExpandOptionAliasPart;
    }

    /**
     * Returns Doctrine Model Alias from Doctrine Model for reference class
     * @return string|null
     * @throws MethodNotAllowedException
     */
    public function getBaseModelAlias(): ?string
    {
        $baseModelClass = $this->getBaseModelClass();
        if ($baseModelClass) {
            /** @var DoctrineModel $baseModelClass */
            return $baseModelClass::MODEL_ALIAS;
        }
        return null;
    }
}